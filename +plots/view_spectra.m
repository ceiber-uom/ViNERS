
function view_spectra(varargin)
% plots.view_spectra( ... )
%   Generates a PDF of a set of simulated recordings as generated by 
% models.population_response, including the results of chronux spectral 
% analysis (mtspectrumc). There are three ways to select the body of
% simulations to plot: 
%  plots.response_waves('sub~/waves/wave-type') : with a path or bids-path
%  plots.response_waves(..., '-dir','sub~/waves/wave-type') : as option 1
%  plots.response_waves('-wave-type') : attempt to use default path for
%                                       specified type. One of: 
%                                     { flat, base, drift, burst, ecap }
% 
% Command-line arguments may be supplied as the follows: 
% -nopdf       : suppress PDF generation
% -gather-data : suppress figure generation and inject gathered responses
%                 and response metadata into the calling workspace as 
%                `pop_response` and `pop_info`
%                NOTE as of 07 Sep 2020, this can be done using
%                models.compose_waves(...)
% -raster      : show spike raster where relevent
% -zoom        : for A-delta fibres, enlarge XC x-axis to short lags
% 
% Data import options:
% -dir `path`  : use specified directory for recordings  
% -base `path` : use specified directory for baseline firing rate for
%                inactive axon types 
% -quick       : skip pairwise groups during import
% 
% Data processing options:
% -noise 10 (µV) : define Gaussian noise amplitude
% -roi 25 (ms)   : define time window to exclude edge effects 
%                   (symmetric around 0 or 2-elementvector)
% -elec [...]    : define recording electrode pairs 
%                   (synonymous with -chan, -pair)
% -fasc [1:nF]   : reduce recording to the specified fascicle IDs
% 
% v0.4 CDE 07-Sep-2020

named = @(v) strncmpi(v,varargin,length(v)); 
get_ = @(v) varargin{find(named(v))+1};

if any(named('-gather-data'))
  [response,info] = models.compose_waves(varargin{:}); 
  
  [pop_code,~,~] = unique(info.metadata(:,info.idx_ok),'rows');
  info.page = pageination(info.s(info.id).wave_path, pop_code);
  % pageination
  
  assignin('caller','pop_response',response);   
  assignin('caller','pop_info',info); 
  return  
elseif any(named('-get-p'))
  
  if isstruct(varargin{1}), info = varargin{1};
  elseif any(named('-for')), info = get_('-for');
  else info = get_('-get-p'); 
  end
  info.idx_ok = (info.meta_col ~= 'c');
  [pop_code,~,~] = unique(info.metadata(:,info.idx_ok),'rows');
  page_info = pageination(info.sim_settings.wave_path, pop_code);
  assignin('caller','page_info',page_info); 
  return
end

do.pdf = ~any(named('-nopdf')); 
plots.PDF_tools('setup',do.pdf);

do.plot_waves = any(named('-wav')); 
do.plot_raster = any(named('-ras'));
do.plot_spectra = true; % any(named('-spec'));

do.zoom = [];
if any(named('-zoom')), do.zoom = get_('-zoom'); end

%% Get source files 

[base,config] = models.compose_waves(varargin{:},'-get-base');
[active,config] = models.compose_waves(varargin{:},'--b',base,'--c',config,'-get-config');

[pop_code,~,pop_index] = unique(config.metadata(:,config.idx_ok),'rows');

do.sim_name = config.s(config.id).name;

if any(named('-quic')), active(5:8) = []; end
if any(named('-type')), active = active(get_('-type')); end

if any(named('-gather-c')),
  error TODO_assign_stuff_in_caller
end

% [settings,config] = models.compose_waves(varargin{:},'--b',base,'--c',config,'-get-config');

%%

nB = []; % size(base(1).wave,2); 
% get_roi_ = @(t)  (t >= min(time_range) & t <= max(time_range));
% C = lines(max(7,nB)); G = @(v) [v v v]/10; 

close all
% set(gcf,'Position',[400 100 880 930])

for active_id = 1:numel(active)  
  %% Load population-modulated spiking files
  [results,info] = models.compose_waves(varargin{:}, '--b',base, ...
                                                     '--c',config, ...
                                                     '--t',active(active_id));
  axontype = info.axon_type;
  active_type = info.active_ty{1} ; 
  
  time = sort(info.time);   
  get_roi_ = @(t) t >= time(1) & t <= time(end); 
  c_index = config.idx == 'c';

  pageination(do.sim_name, pop_code); % get nRows, page_index, indices_, colors_
  
  if numel(results) ~= numel(pop_index)
    p = get_('--page');
    pop_index = p.result_index;
    
    rfid = cat(1,results.file); 
    config.metadata = config.metadata(rfid(:,1),:);    
  end
  
  %% Generate PDF pages
    
  % Whic column of config contains the pop coherence ("_c")? 
  
  for i_page = 1:max(page_index)
    
    %%
    clf    
    this_page = find(page_index == i_page)'; 
    title_str = 'Spectral';
    
    
    for pp = 1:nRows
      %% Make each row on the image
      indices = reshape(this_page(indices_(pp)),1,[]);
      colors = colors_(pp); 

      img = []; 
      coh = []; 
      iid = []; 
      
      for id = indices % Build image and get average
        %%
        sel = (pop_index == id);
        these = results(sel);
        if any(c_index)
          [c,order] = sort(config.metadata(sel,c_index));
        else c = ones(sum(sel),1); order = 1:numel(c);
        end
        coh = [coh; c];               %#ok<AGROW>
        iid = [iid; 0*c+id];          %#ok<AGROW>

        c = colors(indices == id,:);
        
        time = these(1).spk_time; % Go about constructing histogram
        roi = get_roi_(time); % units of ms
        
        [px,py] = stairs_(time(roi), mean(these(1).spk_rate( ... 
                                             active_type,roi),1));
  
        subplot(nRows,3,3*pp - 2), hold on % plot histogram
        fill(px,py,c,'LineWidth',1.2,'EdgeColor',c,'FaceAlpha',0.4)

        subplot(nRows,3,3*pp), hold on % Plot average XC or spectrum

        px = these(1).hz;
        py = mean([these(order).spect],2);
        img = [img  these(order).spect]; %#ok<AGROW>
     
        plot(px,py,'LineWidth',1.3,'Color',c)
      end

      % Add annotations to spike-rate plot (left column)
      subplot(nRows,3,3*pp-2), axis tight, tools.tidyPlot
      if pp < nRows, set(gca,'XTickLabel',''); else xlabel('time (ms)'), end
      if pp == 1, title('Population spike-rate'), end
      set(gca,'Position',get(gca,'Position') - [8 1 -8 -2]/100)
      ylabel('imp/s/cell')
      
      % Add annotations to image plot (centre column)
      subplot(nRows,3,3*pp-1), cla reset
      imagesc(these(1).hz,1:size(img,2),log10(img'))
      caxis(quantile(log10(img(:)),[0.005 0.995]))

      hold on, axis tight xy, tools.tidyPlot
      set(gca,'Position',get(gca,'Position') - [4 1 -7 -2]/100)
      
      %%
      xlim([0 max(xlim)])
      xlbl = 'freq (Hz)';
      
      if pp < nRows, set(gca,'XTickLabel',''); else xlabel(xlbl), end
      set(gca,'YColor','none'), xl = [min(xlim) range(xlim)/50];
      if pp == 1, title([title_str ' image']), end
      
      for id = indices % add coherence indicator on y-axis
        c = colors(indices == id,:);
        py = find(iid == id);
        px = xl(1) - xl(2)*log10(coh(iid==id)) - 1.5*xl(2);  
        axis(axis)
        if do.plot_spectra, py = nB*py; end        
        plot(px(:), py(:), 'color',c,'LineWidth',1.3,'Clipping','off')
      end
      
      subplot(nRows,3,3*pp), axis tight, tools.tidyPlot
      set(gca,'Position',get(gca,'Position') - [1 1 -7 -2]/100)
      if pp < nRows, set(gca,'XTickLabel',''); else xlabel(xlbl),  end
      
      set(gca,'YScale','log')
      xlim([min(xlim) xl(2)*50])
      set(gca,'Position',get(gca,'Position') + [1 0 0 0]/100)
      
      if pp == 1, title([title_str ' average']), end
      
    end % over population code freqs
    
    set(0,'ShowHiddenHandles','off')

    h = get(gcf,'Children');
    set(h(2:3:end),'YLim',[min([h(2:3:end).YLim]) max([h(2:3:end).YLim])])
        
    txt = sprintf(', %s', axontype{active_type});  
    txt = sprintf('%s: Population spike-rate variation', txt(3:end));
    suptitle(txt)
    
    %%
    plots.PDF_tools(gcf,'a%03d-summary%d.ps',active_id,i_page)
    
  end % pages per active_ID       
end % active_ID

plots.PDF_tools('combine',do.pdf,'Experiment_Population (%d).pdf')



function page = pageination(sim_name,pop_code)

named = evalin('caller','named');

G = @(v) [v v v]/10; C = lines(7); 


if any(named('--page'))
  get_ = evalin('caller','get_');
  p = get_('--page'); 
  sim_name = '__SET__';
end


%% Get options for pagination 
switch(sim_name)
  case 'burst'
    % The data has 2 groups: low-rates (0-3) and high-rates (10-30)
    % Within each rate group, plot at each modulation frequency
    page_index = (pop_code(:,1) > 4) + 1;
    nRows = length(unique(pop_code(:,2)));
    indices_ = @(pp) [0 pp pp+nRows]+1;
    colors_ = @(pp) [G(6); C(1:2,:) * (nRows-pp)/(nRows-1) + ...
                             C(6:7,:) * (pp-1)/(nRows-1)];

  case 'drift'
    page_index = 0*pop_code(:,1) + 1; 
    nRows = length(unique(pop_code(:,1)));
    indices_ = @(pp) (pp-1)*3 + [3 2 1];      
    colors_ = @(pp) [G(6); C(1:2,:) * (nRows-pp)/(nRows-1) + ...
                             C(6:7,:) * (pp-1)/(nRows-1)];

  case {'flat','base','default'}
    page_index = 0*pop_code(:,1) + 1; 
    nRows = length(unique(pop_code(:,1)));
    indices_ = @(pp) pp;
    colors_ = @(pp) G(1);

  case 'ecap'

    page_index = 0*pop_code(:,1) + 1; 
    nRows = 1; 
    indices_ = @(pp) numel(pop_code):-1:1;
    colors_ = @(pp) flipud(jet(numel(pop_code)) .* [1 .9 1]);
    
  case 'stimulus'
    
    nP = numel(pop_code);
    page_index = 0*pop_code(:,1) + 1; 
    nRows = 4; 
    indices_ = @(pp) (pp-1)*floor(nP/nRows) + (1:ceil(nP/nRows));
    col = (jet(numel(pop_code)) .* [1 .9 1]);
    colors_ = @(pp) col(indices_(pp),:);

  case '__SET__'

    if isfield(p,'page_index')
      page_index = p.page_index; 
      nRows      = p.nRows; 
      indices_   = p.indices_;
      colors_    = p.colors_;
    else
      page_index = p.id; 
      nRows      = p.nRows; 
      indices_   = p.get_row_;
      colors_    = p.get_color_;
    end
  otherwise
    if ~any(named('-gather-data'))    
      error('simtype "%s": unknown pagination', sim_name)
    else warning('PN_model:unknownType',...
            'simtype "%s": unknown pagination', sim_name)
    end
    page_index = []; 
    nRows = []; 
    indices_ = []; 
    colors_ = []; 
end

if nargout == 0
  assignin('caller','page_index',page_index)
  assignin('caller','nRows',nRows)
  assignin('caller','indices_',indices_)
  assignin('caller','colors_',colors_)
else  
  page.id    = page_index; 
  page.nRows = nRows;
  page.get_row_ = indices_;
  page.get_color_ = colors_; 
end




function [px,py] = stairs_(x,y)

dx = mean(diff(x))/2; 

px = [1;1] * reshape(x,1,[]) + [-dx; dx];
px = px([1 1:end end]);

py = [1;1] * reshape(y,1,[]); 
py = [0 py(:)' 0];

